#!/usr/bin/env python3

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from argcomplete import autocomplete
from pathlib import Path

formats = 'json', 'toml', 'yaml', 'msgpack', 'pickle'
binary_formats = 'msgpack', 'pickle'

prog = Path(__file__)
epilog = f"""\
{prog.name} lists values from hierarchical key store

""" r"""
$ echo -e 'a.b.c=1\na.d=2.0\ne="3"' | k-list toml
a.b.c
 .d
e
$ echo -e 'a.b.c=1\na.d=2.0\ne="3"' | k-list toml -v
a.b.c = 1
 .d = 2.0
e = 3
$ echo -e 'a.b.c=1\na.d=2.0\ne="3"' | k-list toml 2 -v
a.b
 .d
e = 3
$ echo -e 'a.b.c=1\na.d=2.0\ne="3"' | k-list toml 3 -v
a.b.c
 .d = 2.0
e = 3
$ echo -e 'a.b.c=1\na.d=2.0\ne="3"' | k-list toml -dv
a.b.c=1
a.d=2.0
e=3
"""
parser = ArgumentParser(
    prog=prog.name,
    description='list hierarchical data up to a certain depth',
    epilog=epilog,
    formatter_class=RawDescriptionHelpFormatter,
)
parser.add_argument('format', choices=formats, help='data format')
parser.add_argument('depth', nargs='?', type=int, default=-1,
    help='how far into the hierarchy to descend (default -1 means all the way)')
parser.add_argument('--values', '-v', action='store_true', default=False,
    help='print values (leaf nodes) if passed; assuming the most sensitive '
         'data is in the values, this is not safe and thus not on by default')
parser.add_argument('--dense', '-d', action='store_true', default=False,
    help='print data in a machine-friendy way')
autocomplete(parser)
args = parser.parse_args()

from sys import stdin
from importlib import import_module
from string import whitespace, printable

sep = '.'
equals = '=' if args.dense else ' = '


def not_printable(s: str) -> bool:
    return any(c in whitespace or c not in printable for c in s)


def rprint(data, depth, prefix=''):
    if not depth:
        print(prefix)
    elif not isinstance(data, dict):
        if isinstance(data, str) and not_printable(data):
            data = repr(data)
        print(f'{prefix}{equals}{data}' if args.values else prefix)
    else:
        for key, val in data.items():
            if sep in key or not_printable(key):
                key = repr(key)
            rprint(val, depth - 1, f'{prefix}{sep}{key}' if prefix else key)
            if not args.dense:
                prefix = ' ' * len(prefix)


if args.format in binary_formats:
    stdin = stdin.buffer
load = import_module(args.format).load
data = load(stdin)
rprint(data, args.depth)
