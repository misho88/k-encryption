#!/usr/bin/env python3

from argparse import ArgumentParser
from argcomplete import autocomplete
from pathlib import Path

prog = Path(__file__)
parser = ArgumentParser(prog=prog.name, description='Fernet-Compatible Key Generator')
parser.add_argument('salt', type=str.encode,
    help='the salt the key generator uses in conjunction with the password')
parser.add_argument('--password', '-p',
    help='the password (ideally, only to be used in scripts)')
parser.add_argument('--no-warning', action='store_true',
    help='suppress the warning about passing a password on the command line '
         'outside of a script')
parser.add_argument('--confirm', '-c', action='store_true', default=False,
    help='ask twice for the password')
autocomplete(parser)
args = parser.parse_args()


from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.hashes import SHA256
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC  # WTF?

from base64 import urlsafe_b64encode
from getpass import getpass

from sys import stdin, stdout, stderr, exit

from subprocess import run


def die(result, error=None):
    if result.returncode:
        error = result.stderr if error is None else f'{error}\n'.encode()
        if error is not None:
            stderr.buffer.write(error)
            stderr.buffer.flush()
        exit(result.returncode)
    return result


def sys(*args, capture_output=True, **kwargs):
    return run(*args, capture_output=capture_output, **kwargs)


if args.password is not None:
    if stdin.isatty() and not args.no_warning:
        print(
            f'{prog.name}: '
            'WARNING: using --password/-p interactively is a bad idea; '
            'chances are your password was just logged somewhere',
            file=stderr,
        )
    password = args.password
    if args.confirm:
        print('--confirm/-c may not be passed together with --password/-p', file=stderr)
        exit(1)
else:
    prompt_type = 'tty' if stdin.isatty() else 'not-tty'
    password = die(sys([ 'k-passprompt', '--type', prompt_type ])).stdout
    if args.confirm:
        confirmation = die(sys([ 'k-passprompt', '--type', prompt_type, 'Confirm Password:' ])).stdout
        if password != confirmation:
            print(f'{prog.name}: passwords do not match', file=stderr)
            exit(1)

# Fernet encruption requires length=32
# iterations should be a large number and should *NEVER* change
# I have no idea what backend does
kdf = PBKDF2HMAC(
    algorithm=SHA256(),
    length=32,
    salt=args.salt,
    iterations=100000,
    backend=default_backend()
)

raw_key = kdf.derive(password)
key = urlsafe_b64encode(raw_key)
stdout.buffer.write(key)
if stdout.isatty():
    stdout.write('\n')
