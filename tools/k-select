#!/usr/bin/env python3

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from pathlib import Path
from argcomplete import autocomplete
from sys import argv

formats = 'json', 'toml', 'yaml', 'msgpack', 'pickle'
binary_formats = 'msgpack', 'pickle'

prog = Path(__file__)
parser = ArgumentParser(
    prog=prog.name,
    description='interactively select a key and print the value',
    formatter_class=RawDescriptionHelpFormatter,
)
parser.add_argument('format', choices=formats, help='data format')
parser.add_argument('--menu', '-m', default='auto',
    help="menu application to use (default: rofi or dmenu)")
parser.add_argument('--prompt', '-p', default='Key: ',
    help="prompt text")
parser.add_argument('--key', '-k', action='store_true',
    help="print key on stderr")
parser.add_argument('--query', '-q',
    help="initial query text (not all menu support this)")
parser.add_argument('--message', '-s',
    help="extra message")

autocomplete(parser)
try:
    i = argv.index('--')
except ValueError:
    own_args, menu_args = argv[1:], []
else:
    own_args, menu_args = argv[1:i], argv[i + 1:]
args = parser.parse_args(own_args)

from subprocess import run, PIPE
from sys import stdin, stdout, stderr, exit
from contextlib import contextmanager


@contextmanager
def ensure_isatty(file):
    if file.isatty():
        yield file
        return
    with open('/dev/tty', 'wb') as file:
        yield file


def die(result, error=None):
    if result.returncode:
        error = result.stderr if error is None else f'{error}\n'.encode()
        if error is not None:
            stderr.buffer.write(error)
            stderr.buffer.flush()
        exit(result.returncode)
    return result


def sys(*args, capture_output=True, **kwargs):
    return run(*args, capture_output=capture_output, **kwargs)


candidate_menu = { 'tty': ('fzf', 'pmenu'), 'gui': ('rofi', 'dmenu') }
candidate_menu['all'] = candidate_menu['tty'] + candidate_menu['gui']

if args.menu == 'auto':
    args.menu = 'all' if stdout.isatty() else 'gui'

if args.menu in candidate_menu.keys():
    for cmd in candidate_menu[args.menu]:
        if sys([ 'which', cmd ]).returncode == 0:
            args.menu = cmd
            break
    else:
        print(
            'could not find a suitable menu; either specify --menu/-m or '
            'install one of {", ".join(candidate_menu)}',
            file=stderr
        )
        exit(1)

pairs = die(sys([ 'k-split-values', args.format ], input=stdin.buffer.read()))

if args.menu == 'rofi':
    if args.prompt.rstrip().endswith(':'):
        args.prompt = args.prompt.rstrip()[:-1]
    cmdline = [
        'rofi', '-dmenu', '-no-custom',
        '-p', args.prompt
    ] + menu_args
    if args.message is not None:
        cmdline += [ '-mesg', args.message ]
    key = die(sys(cmdline, input=pairs.stdout)).stdout.rstrip()
elif args.menu == 'dmenu':
    cmdline = [ 'dmenu' ] + menu_args
    key = die(sys(cmdline, input=pairs.stdout)).stdout.rstrip()
elif args.menu == 'fzf':
    cmdline = [ 'fzf' ]
    if args.query is not None:
        cmdline += '--query', args.query
    cmdline += menu_args  # needs stderr to be free
    with ensure_isatty(stderr) as err:
        key = die(run(cmdline, stdout=PIPE, stderr=err, input=pairs.stdout), 'fzf failed').stdout.rstrip()
else:
    from shlex import split
    cmdline = split(args.menu) + menu_args
    key = die(sys(cmdline, input=pairs.stdout)).stdout.rstrip()

if args.key:
    stderr.buffer.write(key)
    if stderr.isatty():
        stderr.write('\n')

value = next(v for k, v in zip(
    pairs.stdout.splitlines(keepends=False),
    pairs.stderr.splitlines(keepends=False),
) if k == key)

stdout.buffer.write(value)
if stdout.isatty():
    stdout.write('\n')
