#!/usr/bin/env python3

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from pathlib import Path
from argcomplete import autocomplete

prog = Path(__file__)
parser = ArgumentParser(
    prog=prog.name,
    description='Manage Encrypted Key-Value Store',
    formatter_class=RawDescriptionHelpFormatter,
)
parser.add_argument('action', nargs='*', help="what to do")
parser.add_argument('--name', '-n', default='default',
    help="name of the store (default: default)")
parser.add_argument('--data-directory', '-d', type=Path,
    help='data directory')
parser.add_argument('--storage-format', '-F', default='msgpack',
    help="the format of the store")
parser.add_argument('--action-format', '-f', default='toml',
    help="the format to edit in")
parser.add_argument('--read-only', '-r', action='store_true',
    help='do not try to write data back to the store (by default: only '
         'write back if the data has changed')
parser.add_argument('--print-result', '-p', action='store_true',
    help='whether to print the result (if the action is some filter or list, '
         'this is a good idea)')
parser.add_argument('--shell', '-s', action='store_true',
    help='run the action in a shell (so things like piping work)')
autocomplete(parser)
args = parser.parse_args()

from subprocess import run
from sys import stdout, stderr, exit
from os import environ
from tempfile import NamedTemporaryFile
from shutil import copy


if args.shell and len(args.action) > 1:
    print(
        "action must be single argument when --shell is passed (put it in quotes?)",
        file=stderr,
    )
    exit(1)


def die(result, error=None):
    if result.returncode:
        error = result.stderr if error is None else f'{error}\n'.encode()
        if error is not None:
            stderr.buffer.write(error)
            stderr.buffer.flush()
        exit(result.returncode)
    return result


def sys(*args, capture_output=True, **kwargs):
    return run(*args, capture_output=capture_output, **kwargs)


if args.data_directory is not None:
    dir = args.data_directory
else:
    dir = Path(environ.get('K_ENCRYPTION_DATA_DIRECTORY', '~/.local/share/k-encryption'))
dir = dir.expanduser()
path = dir / args.name

encrypted = path.read_bytes()

key = die(sys([ 'k-getkey' ])).stdout

while True:
    result = sys([ 'k-decrypt', key ], input=encrypted)
    if result.returncode == 0:
        data = result.stdout
        break
    if result.returncode != 4:
        die(result)
    stderr.buffer.write(result.stderr)
    stderr.buffer.flush()
    key = die(sys([ 'k-getkey', '--new' ])).stdout


formatted = die(sys([ 'k-convert', args.storage_format, args.action_format ], input=data)).stdout

transformed = formatted
while True:
    if args.action:
        if args.shell:
            transformed = die(sys(args.action[0], shell=True, input=transformed)).stdout
        else:
            transformed = die(sys(args.action, input=transformed)).stdout
    else:
        no_write = True
        break

    no_write = args.read_only or formatted == transformed
    if no_write:
        break

    result = sys([ 'k-convert', args.action_format, args.storage_format ], input=transformed)
    if result.returncode:
        try:
            print(
                'failed to convert edited data:',
                result.stderr.decode(),
                sep='\n\n',
                file=stderr,
            )
            input('Press ENTER to try again, CTRL+C to cancel.')
            print("trying again...", file=stderr)
        except KeyboardInterrupt:
            break
    else:
        data = result.stdout
        break

if args.print_result:
    stdout.buffer.write(transformed)
    if stdout.isatty() and not transformed.endswith(b'\n'):
        stdout.write('\n')

if no_write:
    exit(0)

encrypted = die(sys([ 'k-encrypt', key ], input=data)).stdout

with NamedTemporaryFile() as tmpfile:
    tmpfile.write(encrypted)
    tmpfile.flush()
    copy(tmpfile.name, path)
