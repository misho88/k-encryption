#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path
from argcomplete import autocomplete

prog = Path(__file__)
parser = ArgumentParser(
    prog=prog.name,
    description='interactively select a key and print the value',
)
parser.add_argument(
    'count', nargs='?', type=int,
    help='how many times to show the selection dialog (default: 1)'
)
parser.add_argument(
    '--clipboard', '-c',
    help='which clipboard to use (see k-clipboard --help)'
)
parser.add_argument(
    '--clear-clipboard', '-C', action='store_true',
    help='if passed, '
)

autocomplete(parser)
args = parser.parse_args()
if args.count is None:
    args.count = 1


from subprocess import run, CalledProcessError, PIPE
from sys import stdout, stderr, exit
try:
    from psutil import process_iter
except ImportError:
    def process_iter():
        return
        yield
from getpass import getuser
from pwd import getpwnam


def die(result, error=None):
    if result.returncode:
        error = result.stderr if error is None else f'{error}\n'.encode()
        if error is not None:
            stderr.buffer.write(error)
            stderr.buffer.flush()
        exit(result.returncode)
    return result


def sys(*args, capture_output=True, **kwargs):
    return run(*args, capture_output=capture_output, **kwargs)


def split_keys(keys):
    if keys[0] in "'" '"':
        from ast import literal_eval
        i = 1
        while (i := keys.find(keys[0], i) + 1) > 0:
            try:
                key = literal_eval(keys[:i])
                break
            except SyntaxError:
                pass
        else:
            raise SyntaxError('unterminated string')
    else:
        i = keys.find('.')
        if i < 0:
            i = len(keys)
        key = keys[:i]
    yield key
    if i < len(keys):
        yield from split_keys(keys[i + 1:])


# check if clipmenud is running for this user
uid = getpwnam(getuser()).pw_uid
clipmenud = any(
    proc.uids().effective == uid and (proc.name() == 'clipmenud' or (
        proc.name() == 'bash' and len(cmd := proc.cmdline()) >= 2 and 'clipmenud' in cmd[1]
    ))
    for proc in process_iter()
)

clip_cmdline = [ 'k-clipboard', 'set' ]
if args.clipboard is not None:
    clip_cmdline.append(args.clipboard)

data = die(sys([ 'k-read' ])).stdout

if clipmenud:
    die(sys([ 'clipctl', 'disable' ]))

try:
    menu = 'all' if stdout.isatty() else 'gui'
    query = ''
    for _ in range(args.count):
        result = run(
            [ 'k-select', 'toml', '--key', '--menu', menu, '--query', query ],
            stdout=PIPE,
            stderr=PIPE,
            input=data,
            check=True,
        )
        selection = result.stdout
        run(clip_cmdline, check=True, input=selection)
        try:
            query = next(split_keys(result.stderr.decode())) + ' '
        except StopIteration:
            query = ''
        last_dot = 0
except CalledProcessError as e:
    print(e, file=stderr)
finally:
    if args.clear_clipboard:
        try:
            input('ENTER to clear clipboard; CTRL+C to keep clipboard')
        except KeyboardInterrupt:
            print()
        except EOFError:
            run(clip_cmdline, check=True, input=b'')
        else:
            run(clip_cmdline, check=True, input=b'')
    if clipmenud:
        die(sys([ 'clipctl', 'enable' ]))
