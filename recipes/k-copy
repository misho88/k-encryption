#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path
from argcomplete import autocomplete

prog = Path(__file__)
parser = ArgumentParser(
    prog=prog.name,
    description='interactively select a key and print the value',
)
parser.add_argument('clipboard', nargs='?',
    help="which clipboard to use (see k-clipboard --help)")

autocomplete(parser)
args = parser.parse_args()

from subprocess import run, CalledProcessError, PIPE
from sys import stdout, stderr, exit
try:
    from psutil import process_iter
except ImportError:
    def process_iter():
        return
        yield
from getpass import getuser
from pwd import getpwnam


def die(result, error=None):
    if result.returncode:
        error = result.stderr if error is None else f'{error}\n'.encode()
        if error is not None:
            stderr.buffer.write(error)
            stderr.buffer.flush()
        exit(result.returncode)
    return result


def sys(*args, capture_output=True, **kwargs):
    return run(*args, capture_output=capture_output, **kwargs)


# check if clipmenud is running for this user
uid = getpwnam(getuser()).pw_uid
clipmenud = any(
    proc.uids().effective == uid and (proc.name() == 'clipmenud' or (
        proc.name() == 'bash' and len(cmd := proc.cmdline()) >= 2 and 'clipmenud' in cmd[1]
    ))
    for proc in process_iter()
)

clip_cmdline = [ 'k-clipboard', 'set' ]
if args.clipboard is not None:
    clip_cmdline.append(args.clipboard)

data = die(sys([ 'k-read' ])).stdout

if clipmenud:
    die(sys([ 'clipctl', 'disable' ]))

try:
    menu = 'all' if stdout.isatty() else 'gui'
    selection = run(
        [ 'k-select', 'toml', '--menu', menu ],
        stdout=PIPE,
        input=data,
        check=True,
    ).stdout
    run(clip_cmdline, check=True, input=selection)
except CalledProcessError as e:
    print(e, file=stderr)
finally:
    if clipmenud:
        die(sys([ 'clipctl', 'enable' ]))
